// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER_ROLE
  ADMIN_ROLE
}

model Bill {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  product   BillDetails[]
  total     Int
  published Boolean       @default(false)
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
}

model BillDetails {
  bill      Bill     @relation(fields: [billId], references: [id])
  billId    Int // relation scalar field (used in the `@relation` attribute above)
  shoe      Shoe     @relation(fields: [shoeId], references: [id])
  shoeId    Int // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([billId, shoeId])
}

model Shoe {
  id          Int           @id @default(autoincrement())
  name        String
  description String?       @db.VarChar(500)
  size        Warehouse[]
  price       Float
  sale        Float         @default(0)
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  bill        BillDetails[]
  images      Images[]
  rates       Rating[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Warehouse {
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    Int // relation scalar field (used in the `@relation` attribute above)
  shoe      Shoe     @relation(fields: [shoeId], references: [id])
  shoeId    Int // relation scalar field (used in the `@relation` attribute above)
  qty       Int // relation scalar field (
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([sizeId, shoeId])
}

model Size {
  id         Int         @id @default(autoincrement())
  size_value Int
  shoe       Warehouse[]
}

model Rating {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  shoe       Shoe     @relation(fields: [shoeId], references: [id])
  shoeId     Int
  rate_value Int
  message    String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, shoeId])
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String?
  password String?
  role     Role     @default(USER_ROLE)
  bills    Bill[]
  rates    Rating[]
}

model Images {
  id     Int    @id @default(autoincrement())
  url    String
  shoe   Shoe?  @relation(fields: [shoeId], references: [id])
  shoeId Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  shoes Shoe[]

  @@unique([name])
}
